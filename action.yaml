name: μpkg bundle
description: Uses μpkg to create a μpkg tarball package
inputs:
  upkg-version:
    description: The version of μpkg to use for bundling
    default: ""
    required: false
  name:
    description: The name of the package, will override the name already set in `upkg.json`
    default: ""
    required: false
  version:
    description: The version to write to upkg.json, corresponds to `-V` in `upkg bundle`
    default: "---auto---"
    required: false
  dest:
    description: The package destination, corresponds to `-d` in `upkg bundle`.
    default: ""
    required: false
  paths:
    description: Argument (space separated) list of relative paths to files and directories to include in the package.
    default: ""
    required: false
  working-directory:
    description: The working directory to change to before bundling.
    default: "."
    required: false
outputs:
  name:
    description: The name of the bundled package
    value: ${{ steps.pkgname.outputs.pkgname }}
  version:
    description: The version of the bundled package
    value: ${{ inputs.version == '---auto---' && steps.version.outputs.version || inputs.version }}
  dest:
    description: The location of the bundled package
    value: ${{ steps.dest.outputs.dest }}
  basename:
    description: The basename of the bundled package
    value: ${{ steps.dest.outputs.basename }}
  sha256:
    description: The SHA-256 checksum of the bundled package
    value: ${{ steps.dest.outputs.sha256 }}
runs:
  using: composite
  steps:
  - name: Link upkg if it is already installed
    id: upkg-install
    shell: bash
    run: |
      if type upkg >/dev/null 2>&1; then
        upkg_path=$(which upkg)
        mkdir "${{ github.action_path }}/bin"
        ln -s "$upkg_path" "${{ github.action_path }}/bin/upkg"
      fi
      printf "path=%s\n" "$upkg_path" >> $GITHUB_OUTPUT
    if: ${{ inputs.upkg-version == '' }}
  - uses: orbit-online/upkg-install@v1
    with:
      install-prefix: ${{ github.action_path }}
      version: ${{ inputs.upkg-version || 'latest' }}
    if: "${{ steps.upkg-install.outputs.path == '' || inputs.upkg-version != '' }}"

  - name: Determine the package name to set
    id: pkgname
    shell: bash
    run: |
      if [[ -n $PKGNAME ]]; then
        printf "pkgname=%s\n" "$PKGNAME" >> $GITHUB_OUTPUT
      elif ! jq -re '.name // empty' upkg.json >/dev/null 2>&1; then
        printf "pkgname=%s\n" "$(basename "$REPONAME")" >> $GITHUB_OUTPUT
      fi
    env:
      PKGNAME: ${{ inputs.name }}
      REPONAME: ${{ github.repository }}
    working-directory: ${{ inputs.working-directory }}

  - id: version
    uses: orbit-online/program-version@v1
    if: ${{ inputs.version == '---auto---' }}

  - name: Create μpkg tarball package
    shell: bash
    run: >
      "${{ github.action_path }}/bin/upkg" bundle
      ${{ inputs.version != '' && format('-V  "{0}"', inputs.version == '---auto---' && steps.version.outputs.version || inputs.version) || '' }}
      ${{ steps.pkgname.outputs.pkgname != '' && format('-p "{0}"', steps.pkgname.outputs.pkgname) || '' }}
      ${{ inputs.dest != '' && format('-d "{0}"', inputs.dest) || '' }}
      ${{ inputs.paths }}
    working-directory: ${{ inputs.working-directory }}
  - name: Determine the bundle path and shasum
    id: dest
    shell: bash
    run: |
      dest=$(realpath "${{ inputs.dest != '' && inputs.dest || '"$(jq -re ".name // empty" upkg.json).tar.gz"' }}")
      printf "dest=%s\n" "$dest" >> $GITHUB_OUTPUT
      printf "basename=%s\n" "$(basename "$dest")" >> $GITHUB_OUTPUT
      printf "sha256=%s\n" "$(shasum -a 256 "$dest" | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
    working-directory: ${{ inputs.working-directory }}
